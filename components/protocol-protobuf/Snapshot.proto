/* Copyright (C) 2014-2017 Alexander Shishenko <alex@shishenko.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In addition, as a special exception, the copyright holders give
 * permission to link the code of portions of this program with the
 * OpenSSL library under certain conditions as described in each
 * individual source file, and distribute linked combinations
 * including the two.
 * You must obey the GNU General Public License in all respects
 * for all of the code used other than OpenSSL.  If you modify
 * file(s) with this exception, you may extend this exception to your
 * version of the file(s), but you are not obligated to do so.  If you
 * do not wish to do so, delete this exception statement from your
 * version.  If you delete this exception statement from all source
 * files in the program, then also delete it here.
 */
syntax = "proto3";
package librevault.serialization;
import "google/protobuf/timestamp.proto";

message EncryptedData {
	bytes ct = 1;
	bytes iv = 2;
}

message Inode {
	EncryptedData path = 1;
	google.protobuf.Timestamp timestamp = 2;

    enum InodeType {
	    DELETED = 0;
        FILE = 1;
        DIRECTORY = 2;
        SYMLINK = 3;
	}
	InodeType type = 3;

	google.protobuf.Timestamp mtime = 4;
    uint64 mtime_granularity = 5;    // (0 treated as 1). Should be 0 in "private mode", as it leaks the OS.

	// Windows-specific
	uint32 windows_attrib = 6;
	// Unix-specific
	uint32 mode = 7;
	uint32 uid = 8;
	uint32 gid = 9;

	/* File-specific */
	message ChunkInfo {
		bytes ct_hash = 1;
		uint32 size = 2;
		bytes iv = 3;

		bytes pt_keyed_hash = 4;    // SHA-3 can be used directly by prepending key before the plaintext, others need to use HMAC
	}
	repeated ChunkInfo chunks = 255;

	/* Symlink-specific */
	EncryptedData symlink_target = 10;
}

message Snapshot {
	int64 revision = 1;            // Any *comparable* value, that could be used to uniquely identify this snapshot
	repeated bytes inode_hash = 2;

    // Global chunking parameters
	// Uni-algorithm parameters
	uint32 max_chunksize = 3;
	uint32 min_chunksize = 4;

	// Rabin chunking algorithm parameters
	uint64 polynomial = 5;
	uint32 polynomial_degree = 6;
	uint32 polynomial_shift = 7;
	uint32 avg_bits = 8;
}
